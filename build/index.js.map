{"version":3,"file":"index.js","mappings":"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","sources":["webpack://doctor-management-app/./src/config/config.js","webpack://doctor-management-app/./src/config/db.config.js","webpack://doctor-management-app/./src/config/logger.config.js","webpack://doctor-management-app/./src/controllers/adminController.js","webpack://doctor-management-app/./src/controllers/bookingController.js","webpack://doctor-management-app/./src/controllers/categoryController.js","webpack://doctor-management-app/./src/controllers/dashboard.js","webpack://doctor-management-app/./src/controllers/doctorController.js","webpack://doctor-management-app/./src/controllers/ratingController.js","webpack://doctor-management-app/./src/controllers/userController.js","webpack://doctor-management-app/./src/errors/base.error.js","webpack://doctor-management-app/./src/middlewares/auth.js","webpack://doctor-management-app/./src/models/adminModel.js","webpack://doctor-management-app/./src/models/bannerImageModel.js","webpack://doctor-management-app/./src/models/bookingModel.js","webpack://doctor-management-app/./src/models/categoryModel.js","webpack://doctor-management-app/./src/models/deleteUserModel.js","webpack://doctor-management-app/./src/models/doctorModel.js","webpack://doctor-management-app/./src/models/ratingModel.js","webpack://doctor-management-app/./src/models/userModel.js","webpack://doctor-management-app/./src/routes/v1/adminRoutes.js","webpack://doctor-management-app/./src/routes/v1/bookingRoutes.js","webpack://doctor-management-app/./src/routes/v1/categoryRoutes.js","webpack://doctor-management-app/./src/routes/v1/dashboardRoutes.js","webpack://doctor-management-app/./src/routes/v1/doctorRoutes.js","webpack://doctor-management-app/./src/routes/v1/ratingRoutes.js","webpack://doctor-management-app/./src/routes/v1/userRoutes.js","webpack://doctor-management-app/./src/uitls/errorHandler.js","webpack://doctor-management-app/./src/uitls/utils.js","webpack://doctor-management-app/external commonjs \"bcrypt\"","webpack://doctor-management-app/external commonjs \"body-parser\"","webpack://doctor-management-app/external commonjs \"compression\"","webpack://doctor-management-app/external commonjs \"cors\"","webpack://doctor-management-app/external commonjs \"dotenv\"","webpack://doctor-management-app/external commonjs \"express\"","webpack://doctor-management-app/external commonjs \"express-fileupload\"","webpack://doctor-management-app/external commonjs \"express-mongo-sanitize\"","webpack://doctor-management-app/external commonjs \"helmet\"","webpack://doctor-management-app/external commonjs \"hpp\"","webpack://doctor-management-app/external commonjs \"http-status-codes\"","webpack://doctor-management-app/external commonjs \"jsonwebtoken\"","webpack://doctor-management-app/external commonjs \"mongoose\"","webpack://doctor-management-app/external commonjs \"uuid\"","webpack://doctor-management-app/external commonjs \"winston\"","webpack://doctor-management-app/external commonjs \"winston-mongodb\"","webpack://doctor-management-app/external node-commonjs \"fs\"","webpack://doctor-management-app/external node-commonjs \"os\"","webpack://doctor-management-app/external node-commonjs \"path\"","webpack://doctor-management-app/webpack/bootstrap","webpack://doctor-management-app/./index.js"],"sourcesContent":["const dotenv = require('dotenv');\r\n\r\ndotenv.config();\r\n\r\nmodule.exports = {\r\n    mongoDbUrl: process.env.MONGO_DB_URL,\r\n    logDbUrl: process.env.LOG_DB_URL,\r\n    tokenSecretKey: process.env.JWT_SECRET,\r\n    port: process.env.PORT,\r\n    adminSecretKey: process.env.ADMIN_SECRET_KEY\r\n};","const mongoose = require('mongoose');\r\nconst { mongoDbUrl } = require('./config');\r\n\r\nconst options = {\r\n  maxPoolSize: 4, // Adjust the pool size as needed\r\n};\r\n\r\nmongoose.connect(mongoDbUrl, options);\r\n\r\nconst connectToDatabase = mongoose.connection;\r\nconnectToDatabase.on('error', console.error.bind(console, 'connection error:'));\r\nconnectToDatabase.once('open', () => {\r\n  console.log('Databse connected');\r\n});\r\n\r\nmodule.exports = connectToDatabase;\r\n","const winston = require('winston');\r\nrequire('winston-mongodb');\r\n// const { mongoDbUrl } = require('./config');\r\n\r\nconst allowedTransports = [];\r\n\r\n// // The below transport config enables logging on the console\r\n// allowedTransports.push(new winston.transports.Console({\r\n//     format: winston.format.combine(\r\n//         winston.format.colorize(),\r\n//         winston.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss'}),\r\n//         winston.format.printf((log) => `${log.timestamp} [${log.level}]: [${log.message}] ${log.meta ? JSON.stringify(log.meta) : ''}`)\r\n//     )\r\n// }));\r\n\r\n// MongoDB transport\r\n// allowedTransports.push(new winston.transports.MongoDB({\r\n//     level: 'error',\r\n//     db: mongoDbUrl,\r\n//     collection: 'logs',\r\n//     format: winston.format.combine(\r\n//         winston.format.timestamp(),\r\n//         winston.format.json(),\r\n//         winston.format((info) => {\r\n//             info.meta = info.meta || {};\r\n//             return info;\r\n//         })()\r\n//     ),\r\n//     options: {\r\n//         useUnifiedTopology: true\r\n//     }\r\n// }));\r\n\r\n// The below transport config enables logging in a file\r\nallowedTransports.push(new winston.transports.File({\r\n    filename: 'app.log'\r\n}));\r\n\r\nconst logger = winston.createLogger({\r\n    format: winston.format.combine(\r\n        winston.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),\r\n        winston.format.printf((log) => `${log.timestamp} [${log.level.toUpperCase()}]: ${log.message} ${log.meta? JSON.stringify(log.meta) : ''}`)\r\n    ),\r\n    transports: allowedTransports,\r\n    defaultMeta: { service: 'user-service' }\r\n});\r\n\r\n\r\nmodule.exports = logger;","const adminModel = require(\"../models/adminModel\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst bcrypt = require(\"bcrypt\");\r\nconst uuid = require(\"uuid\");\r\nconst path = require(\"path\");\r\nconst { getCurrentIPAddress, generateRandomAlphaNumericID } = require(\"../uitls/utils\");\r\nconst { port, tokenSecretKey } = require(\"../config/config\");\r\nconst userModel = require(\"../models/userModel\");\r\nconst bookingModel = require(\"../models/bookingModel\");\r\n\r\n// ADD ADMIN\r\nconst createAdmin = async (req, res) => {\r\n    try {\r\n        let { name, email, password, mobile } = req.body;\r\n\r\n        if (!name || !email || !password || !mobile) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        };\r\n\r\n        let { profilePic } = req.files;\r\n\r\n        if (!profilePic) {\r\n            return res.status(400).send({ status: false, message: \"No profile pic uploaded\" });\r\n        };\r\n\r\n        let hashedPassward = await bcrypt.hash(password, 10);\r\n        password = hashedPassward;\r\n\r\n        let currentIpAddress = getCurrentIPAddress();\r\n        let profilePicPath = \"/adminImages/\";\r\n        let profilePicName = uuid.v4() + \".\" + profilePic.name.split(\".\").pop();\r\n        let profilePicFullPath = `http://${currentIpAddress}:${port}${profilePicPath}`;\r\n\r\n        let picSavingPath = path.join(__dirname, \"..\", \"..\", \"adminImages\", profilePicName);\r\n\r\n        profilePic.mv(picSavingPath, (err) => {\r\n            if (err) {\r\n                console.log(err);\r\n            }\r\n        });\r\n\r\n        picObj = {\r\n            picName: profilePicName,\r\n            picPath: profilePicFullPath,\r\n        };\r\n\r\n        let adminObj = {\r\n            adminId: generateRandomAlphaNumericID(26),\r\n            sessionToken: generateRandomAlphaNumericID(51),\r\n            name,\r\n            email,\r\n            password,\r\n            mobile,\r\n            profilePic: picObj,\r\n        };\r\n\r\n        let newAdmin = await adminModel.create(adminObj);\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Admin created\",\r\n            data: newAdmin,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// ADMIN LOGIN\r\nconst adminLogin = async (req, res) => {\r\n    try {\r\n        let { email, password } = req.body;\r\n\r\n        if (!email || !password) {\r\n            return res.status(400).send({ status: false, message: \"Email and password are required\" });\r\n        }\r\n\r\n        let admin = await adminModel.findOne({ email });\r\n        if (!admin) {\r\n            return res.status(400).send({ status: false, message: \"Bad Reques!!!\" });\r\n        }\r\n\r\n        bcrypt.compare(password, admin.password, function (err, result) {\r\n            if (err) {\r\n                throw err;\r\n            }\r\n            hasAccess(result);\r\n        });\r\n\r\n        async function hasAccess(result) {\r\n            if (result) {\r\n                let data = {};\r\n                let date = Date.now();\r\n                let issueTime = Math.floor(date / 1000);\r\n                let token = jwt.sign(\r\n                    {\r\n                        email: admin.email,\r\n                        adminId: admin._id.toString(),\r\n                        iat: issueTime,\r\n                    },\r\n                    tokenSecretKey,\r\n                    { expiresIn: \"24h\" }\r\n                );\r\n                (data._id = admin._id.toString()), (data.email = email);\r\n                data.token = token;\r\n\r\n                res.setHeader(\"Authorization\", \"Bearer\", token);\r\n\r\n                admin.sessionToken = generateRandomAlphaNumericID(51);\r\n\r\n                await admin.save();\r\n\r\n                return res.status(200).send({\r\n                    status: true,\r\n                    message: \"Successfully login\",\r\n                    data: data,\r\n                });\r\n            } else {\r\n                return res.status(401).send({ status: false, message: \"Login denied\" });\r\n            }\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ALL BOOKINGS OF AN USER\r\nconst getAllBookingsOfUser = async (req, res) => {\r\n    try {\r\n        const { adminId, sessionToken, userId } = req.params;\r\n\r\n        if (!adminId || !sessionToken) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        }\r\n\r\n        let admin = await adminModel.findOne({ adminId, sessionToken });\r\n\r\n        if (!admin) {\r\n            return res.status(404).send({ status: false, message: \"Bad Reques!!!\" });\r\n        }\r\n\r\n        if (admin.adminId === adminId && admin.sessionToken === sessionToken) {\r\n            let user = await userModel.findOne({ userId });\r\n\r\n            if (!user) {\r\n                return res.status(404).send({ status: false, message: \"User Not Found\" });\r\n            }\r\n\r\n            let userAllBookings = await bookingModel.find({ userId });\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: userAllBookings,\r\n            });\r\n        } else {\r\n            return res.status(400).send({ status: false, message: \"Session Expired\" });\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ONE DAY REQUESTS\r\nconst getOneDayBookings = async (req, res) => {\r\n    try {\r\n        const { adminId, sessionToken } = req.params;\r\n\r\n        if (!adminId || !sessionToken) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        }\r\n\r\n        let admin = await adminModel.findOne({ adminId, sessionToken });\r\n\r\n        if (!admin) {\r\n            return res.status(404).send({ status: false, message: \"Bad Reques!!!\" });\r\n        }\r\n\r\n        if (admin.adminId === adminId && admin.sessionToken === sessionToken) {\r\n            let date;\r\n            if (req.params.date) {\r\n                date = req.params.date;\r\n            } else {\r\n                let today = new Date(); // Use today's date if no date is provided\r\n                const year = today.getFullYear();\r\n                const month = String(today.getMonth() + 1).padStart(2, \"0\"); // Adding 1 because getMonth() returns zero-based month\r\n                const day = String(today.getDate()).padStart(2, \"0\");\r\n\r\n                date = `${year}-${month}-${day}`;\r\n            }\r\n\r\n            let oneDayBookings = await bookingModel.find({ BookingDate: date });\r\n\r\n            let grandTotal = 0;\r\n            for (let booking of oneDayBookings) {\r\n                grandTotal += booking.grand_total;\r\n            };\r\n\r\n            let data = {\r\n                totalBookings: oneDayBookings,\r\n                oneDayRevenue: grandTotal,\r\n            };\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: data,\r\n            });\r\n        } else {\r\n            return res.status(400).send({ status: false, message: \"Session Expired\" });\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ONE WEEK REQUESTS\r\nconst getOneWeekBookings = async (req, res) => {\r\n    try {\r\n        let { adminId, sessionToken } = req.params;\r\n\r\n        if (!adminId || !sessionToken) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        };\r\n\r\n        let admin = await adminModel.findOne({ adminId, sessionToken });\r\n        if (!admin) {\r\n            return res.status(404).send({ status: false, message: \"Bad Reques!!!\" });\r\n        };\r\n\r\n        if (admin.adminId === adminId && admin.sessionToken === sessionToken) {\r\n            let startDate;\r\n            let endDate;\r\n\r\n            if (req.params.startDate && req.params.endDate) {\r\n                startDate = req.params.startDate;\r\n                endDate = req.params.endDate;\r\n            } else {\r\n                const date = new Date();\r\n                const year = date.getFullYear();\r\n                const month = String(date.getMonth() + 1).padStart(2, \"0\"); // Adding 1 because getMonth() returns zero-based month\r\n                const day = String(date.getDate()).padStart(2, \"0\");\r\n\r\n                endDate = `${year}-${month}-${day}`;\r\n\r\n                const oneWeekAgo = new Date(date.getTime() - 7 * 24 * 60 * 60 * 1000);\r\n                const startYear = oneWeekAgo.getFullYear();\r\n                const startMonth = String(oneWeekAgo.getMonth() + 1).padStart(2, '0');\r\n                const startDay = String(oneWeekAgo.getDate()).padStart(2, '0');\r\n\r\n                startDate = `${startYear}-${startMonth}-${startDay}`;\r\n            };\r\n\r\n            let oneWeekBookings = await bookingModel.find({\r\n                BookingDate: { $gte: startDate, $lte: endDate },\r\n            });\r\n\r\n            let grandTotal = 0;\r\n            if (oneWeekBookings.length) {\r\n                for (let booking of oneWeekBookings) {\r\n                    grandTotal += booking.grand_total;\r\n                };\r\n            };\r\n\r\n            let data = {\r\n                oneWeekBookings: oneWeekBookings,\r\n                grandTotal: grandTotal,\r\n            };\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: data,\r\n            });\r\n        } else {\r\n            return res.status(403).send({ status: false, message: \"Session Expired\" });\r\n        };\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n// GET ONE MONTH REVENUE AND REQUESTS (ADMIN API)\r\nconst getOneMonthBookings = async (req, res) => {\r\n    try {\r\n        const { adminId, sessionToken, month, year } = req.params;\r\n\r\n        if (!adminId || !sessionToken || !month || !year) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        };\r\n\r\n        let admin = await adminModel.findOne({ adminId, sessionToken });\r\n\r\n        if (!admin) {\r\n            return res.status(404).send({ status: false, message: \"Bad Reques!!!\" });\r\n        };\r\n\r\n        if (admin.adminId === adminId && admin.sessionToken === sessionToken) {\r\n            const startDate = `${year}-${month}-01`; // Month is zero-based index\r\n            const endDate = `${year}-${month}-31`;\r\n\r\n            const oneMonthBookings = await bookingModel.find({\r\n                createdAt: { $gte: startDate, $lte: endDate },\r\n            });\r\n\r\n            let grandTotal = 0;\r\n\r\n            if (oneMonthBookings.length) {\r\n                for (let booking of oneMonthBookings) {\r\n                    grandTotal += booking.grand_total;\r\n                };\r\n            };\r\n\r\n            let data = {\r\n                oneMonthBookings: oneMonthBookings,\r\n                oneMonthRevenue: grandTotal,\r\n            };\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: data,\r\n            });\r\n        } else {\r\n            return res.status(400).send({ status: false, message: \"Session Expired\" });\r\n        };\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n// GET ONE YEAR REQUESTS AND REVENUE (ADMIN API);\r\nconst getOneYearBookings = async (req, res) => {\r\n    try {\r\n        const { adminId, sessionToken, year } = req.params;\r\n        if (!adminId || !sessionToken || !year) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        };\r\n\r\n        let admin = await adminModel.findOne({ adminId, sessionToken });\r\n\r\n        if (!admin) {\r\n            return res.status(404).send({ status: false, message: \"Bad Reques!!!\" });\r\n        };\r\n\r\n        if (admin.adminId === adminId && admin.sessionToken === sessionToken) {\r\n            const startDate = `${year}-01-01`; // January 1st of the provided year\r\n            const endDate = `${year}-12-31`; // December 31st of the provided year\r\n\r\n            let oneYearBookings = await bookingModel.find({\r\n                createdAt: { $gte: startDate, $lte: endDate },\r\n            });\r\n\r\n            let grandTotal = 0;\r\n            if (oneYearBookings.length) {\r\n                for (let booking of oneYearBookings) {\r\n                    grandTotal += booking.grand_total;\r\n                };\r\n            };\r\n\r\n            let data = {\r\n                oneYearRequests: oneYearBookings,\r\n                oneYearRevenue: grandTotal,\r\n            };\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: data,\r\n            });\r\n        } else {\r\n            return res.status(400).send({ status: false, message: \"Session Expired\" });\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    createAdmin,\r\n    adminLogin,\r\n    getAllBookingsOfUser,\r\n    getOneDayBookings,\r\n    getOneWeekBookings,\r\n    getOneMonthBookings,\r\n    getOneYearBookings,\r\n};\r\n","const bookingModel = require(\"../models/bookingModel\");\r\nconst userModel = require(\"../models/userModel\");\r\nlet { getCurrentIPAddress } = require(\"../uitls/utils\");\r\nconst uuid = require(\"uuid\");\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");\r\nconst { port, adminSecretKey } = require(\"../config/config\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\n\r\n// CREATE BOOKING\r\nconst createBooking = async (req, res) => {\r\n    try {\r\n        const { userId } = req.params;\r\n\r\n        if (!userId) {\r\n            return res.status(400).send({ status: false, message: \"User Id is required\" });\r\n        }\r\n\r\n        let user = await userModel.findOne({ userId });\r\n\r\n        if (!user) {\r\n            return res.status(404).send({ status: false, message: \"User Not Found\" });\r\n        }\r\n\r\n        let { appointment_date, notes, doctor_name, doctor_id, slot } = req.body;\r\n\r\n        let checkBookingSlot = await bookingModel.findOne({\r\n            appointment_date,\r\n            doctor_name,\r\n            doctor_id,\r\n            slot\r\n        });\r\n\r\n        if (checkBookingSlot) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"The doctor already has an appointment for given date and slot\"\r\n            });\r\n        };\r\n\r\n        let bookingId;\r\n        let isBookingAlreadyExist;\r\n        do {\r\n            bookingId = Math.floor(100000 + Math.random() * 899999);\r\n            isBookingAlreadyExist = await bookingModel.findOne({ bookingId: bookingId });\r\n        } while (isBookingAlreadyExist);\r\n\r\n        let imgObj = { fileName: \"\", filePath: \"\" };\r\n        if (\"notes_file\" in req.body) {\r\n            let { File_Extension, File_Path, File_data, File_name } = req.body.notes_file;\r\n\r\n            let decodedData = Buffer.from(File_data, \"base64\");\r\n\r\n            // let { notes_file } = req.files;\r\n\r\n            let bookingImgFolder = path.join(__dirname, \"..\", \"..\", \"bookings\");\r\n\r\n            if (!fs.existsSync(bookingImgFolder)) {\r\n                fs.mkdirSync(bookingImgFolder);\r\n            }\r\n\r\n            let currentIpAddress = getCurrentIPAddress();\r\n            let imgRelativePath = \"/bookings/\";\r\n            let imgUniqName = uuid.v4() + File_Extension;\r\n            let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n            let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"bookings\", imgUniqName);\r\n\r\n            fs.writeFileSync(imgSavingPath, decodedData);\r\n\r\n            // notes_file.mv(imgSavingPath, (err) => {\r\n            //     if (err) throw err;\r\n            // })\r\n\r\n            imgObj = {\r\n                fileName: imgUniqName,\r\n                filePath: imgFullUrl,\r\n            };\r\n        }\r\n\r\n        let bookingObj = {\r\n            userId,\r\n            bookingId,\r\n            appointment_date,\r\n            notes,\r\n            notes_file: imgObj,\r\n            doctor_name,\r\n            doctor_id,\r\n            slot,\r\n        };\r\n\r\n        let newBooking = await bookingModel.create(bookingObj);\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Booking created successfully\",\r\n            data: newBooking,\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ALL BOOKINGS OF A USER BY USER ID\r\nconst getUserAllBookings = async (req, res) => {\r\n    try {\r\n        let { userId } = req.params;\r\n        if (!userId) {\r\n            return res.status(400).send({ status: false, message: \"userId is required\" });\r\n        }\r\n\r\n        let user = await userModel.findOne({ userId });\r\n\r\n        if (!user) {\r\n            return res.status(404).send({ status: false, message: \"User Not Found\" });\r\n        }\r\n\r\n        let allBookingsOfAUser = await bookingModel.find({ userId: user.userId });\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: allBookingsOfAUser,\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ALL BOOKINGS\r\nconst getAllBookings = async (req, res) => {\r\n    try {\r\n        let { key } = req.params;\r\n\r\n        if (!key) {\r\n            return res.status(400).send({ status: false, message: \"Key is required\" });\r\n        }\r\n\r\n        if (key === adminSecretKey) {\r\n            let allBookings = await bookingModel.find({});\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: allBookings,\r\n            });\r\n        } else {\r\n            return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\" });\r\n        }\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ALL SLOTS OF A PERTICULAR DATE\r\nconst getAllSlotsOfADate = async (req, res) => {\r\n    try {\r\n        let { date } = req.params;\r\n        if (!date) {\r\n            return res.status(400).send({ status: false, message: \"Date is required\" });\r\n        }\r\n\r\n        let allBookings = await bookingModel.find({ appointment_date: date });\r\n\r\n        let timeSlotArr = [];\r\n        if (allBookings.length) {\r\n            for (let booking of allBookings) {\r\n                timeSlotArr.push(booking.slot);\r\n            }\r\n        }\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            date: date,\r\n            bookedSlots: timeSlotArr,\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET SPECIFIC BOOKING OF AN USER\r\nconst getSpecificBooking = async (req, res) => {\r\n    try {\r\n        let { bookingId } = req.params;\r\n        if (!bookingId) {\r\n            return res.status(400).send({ status: false, message: \"bookingId is required\" });\r\n        }\r\n\r\n        let booking = await bookingModel.findById(bookingId);\r\n        if (!booking) {\r\n            return res.status(404).send({\r\n                status: false,\r\n                message: \"No booking found with this booking id\",\r\n            });\r\n        }\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: booking,\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// UPDATE BOOKING STATUS\r\nconst updateBookingStatus = async (req, res) => {\r\n    try {\r\n        const { bookingId } = req.params;\r\n\r\n        if (!bookingId) {\r\n            return res.status(400).send({ status: false, message: \"Booking Id is required\" });\r\n        }\r\n\r\n        const { status, question, feedback } = req.body;\r\n\r\n        if (!status) {\r\n            return res.status(400).send({ status: false, message: \"status is required\" });\r\n        }\r\n\r\n        if (!isValidObjectId(bookingId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Booking Id\" });\r\n        }\r\n\r\n        let booking = await bookingModel.findById(bookingId);\r\n\r\n        if (!booking) {\r\n            return res.status(200).send({ status: true, message: \"Booking Not Found\" });\r\n        }\r\n\r\n        booking.booking_status = status;\r\n        booking.question = question ? question : \"\";\r\n        booking.feedback = feedback ? feedback : \"\";\r\n\r\n        await booking.save();\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Booking status updated successfully\",\r\n            data: booking,\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// SUBMIT OR UPDATE BOOKING BY DOCTOR\r\nconst submitBookingByDoctor = async (req, res) => {\r\n    try {\r\n        const { bookingId } = req.params;\r\n\r\n        if (!bookingId) {\r\n            return res.status(400).send({ status: false, message: \"Booking Id is required\" });\r\n        }\r\n\r\n        let booking = await bookingModel.findById(bookingId);\r\n\r\n        if (!booking) {\r\n            return res.status(400).send({ status: false, message: \"Booking not found\" });\r\n        }\r\n\r\n        let e = req.body;\r\n\r\n        booking.doctorInstructions = e.doctorInstructions;\r\n        booking.next_appointment_date = e.next_appointment_date;\r\n\r\n        await booking.save();\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Booking submitted successfully\",\r\n            data: booking,\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// UPDATE BOOKING FILES BY DOCTOR\r\nconst updateBookingFilesByDoctor = async (req, res) => {\r\n    try {\r\n        let { bookingId } = req.params;\r\n\r\n        if (!bookingId) {\r\n            return res.status(400).send({ status: false, message: \"Booking Id is required\" });\r\n        }\r\n\r\n        let booking = await bookingModel.findById(bookingId);\r\n\r\n        if (!booking) {\r\n            return res.status(400).send({ status: false, message: \"Booking not found\" });\r\n        }\r\n\r\n        let { ImageModel } = req.body;\r\n\r\n        let parsedData = JSON.parse(ImageModel);\r\n\r\n        let { file } = req.files;\r\n\r\n        if (!file) {\r\n            return res.status(400).send({ status: false, message: \"No file uploaded\" });\r\n        }\r\n\r\n        let index = parsedData.index; //{\"isNewPick\":false,\"index\":1,\"img_id\":\"64ffebc1f3bfc5d77220193b\",\"imageName\":\"1694493633669-432139964.jpg\"}\r\n        let img_id = parsedData.img_id ? parsedData.img_id : \"\";\r\n        let imageName = parsedData.imageName;\r\n        let isNewPick = parsedData.isNewPick;\r\n\r\n        let currentIpAddress = getCurrentIPAddress();\r\n        let imgRelativePath = \"/bookings/\";\r\n        let imgUniqName = uuid.v4() + \".\" + file.name.split(\".\").pop();\r\n        let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n        let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"bookings\", imgUniqName);\r\n\r\n        if (!isNewPick) {\r\n            let oldImage = booking.files[index].fileName;\r\n            if (oldImage) {\r\n                let oldImgPath = path.join(__dirname, \"..\", \"..\", \"bookings\", oldImage);\r\n                if (fs.existsSync(oldImgPath)) {\r\n                    fs.unlinkSync(oldImgPath);\r\n                }\r\n            }\r\n\r\n            file.mv(imgSavingPath, (err) => {\r\n                if (err) throw err;\r\n            });\r\n\r\n            let updatedFileObj = {\r\n                fileName: imgUniqName,\r\n                filePath: imgFullUrl,\r\n            };\r\n\r\n            booking.files[index] = updatedFileObj;\r\n\r\n            await booking.save();\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Booking file uploaded successfully\",\r\n                data: booking,\r\n            });\r\n        } else {\r\n            file.mv(imgSavingPath, (err) => {\r\n                if (err) throw err;\r\n            });\r\n\r\n            let newFileObj = {\r\n                fileName: imgUniqName,\r\n                filePath: imgFullUrl,\r\n            };\r\n\r\n            booking.files.push(newFileObj);\r\n\r\n            await booking.save();\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Booking file uploaded successfully\",\r\n                data: booking,\r\n            });\r\n        }\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    createBooking,\r\n    getAllSlotsOfADate,\r\n    getUserAllBookings,\r\n    getAllBookings,\r\n    getSpecificBooking,\r\n    updateBookingStatus,\r\n    submitBookingByDoctor,\r\n    updateBookingFilesByDoctor,\r\n};\r\n","const categoryModel = require(\"../models/categoryModel\");\r\nlet { getCurrentIPAddress } = require(\"../uitls/utils\");\r\nconst uuid = require(\"uuid\");\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");\r\nconst { port, adminSecretKey } = require(\"../config/config\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\nconst logger = require(\"../config/logger.config\");\r\n\r\n// ADD CATEGORY\r\nconst addCategory = async (req, res) => {\r\n    try {\r\n        let { key } = req.params;\r\n\r\n        if (!key) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"key is required\"\r\n            });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: \"Not authorized\"\r\n            });\r\n        };\r\n\r\n        let { name, description } = req.body;\r\n\r\n        if (!name || !description) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        };\r\n\r\n        let { File_Extension, File_Path, File_data, File_name } = req.body.FileUpload;\r\n\r\n        let decodedData = Buffer.from(File_data, \"base64\");\r\n\r\n        let categoryImgFolder = path.join(__dirname, \"..\", \"..\", \"categoryImages\");\r\n\r\n        if (!fs.existsSync(categoryImgFolder)) {\r\n            fs.mkdirSync(categoryImgFolder);\r\n        }\r\n\r\n        let currentIpAddress = getCurrentIPAddress();\r\n        let imgRelativePath = \"/categoryImages/\";\r\n        let imgUniqName = uuid.v4() + File_Extension;\r\n        let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n        let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"categoryImages\", imgUniqName);\r\n\r\n        fs.writeFileSync(imgSavingPath, decodedData);\r\n\r\n        let imgObj = {\r\n            fileName: imgUniqName,\r\n            filePath: imgFullUrl,\r\n        };\r\n\r\n        let categoryObj = {\r\n            name,\r\n            description,\r\n            category_image: imgObj,\r\n        };\r\n\r\n        let newCategory = await categoryModel.create(categoryObj);\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Category Added\",\r\n            data: newCategory,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in addCategory API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n// GET CATEGORY BY CATEGORY ID\r\nconst getCategoryById = async (req, res) => {\r\n    try {\r\n        let { categoryId } = req.params;\r\n\r\n        let category;\r\n        if (categoryId) {\r\n            if (!isValidObjectId(categoryId)) {\r\n                return res.status(400).send({ status: false, message: \"Invalid category Id\"});\r\n            }\r\n            category = await categoryModel.findById(categoryId);\r\n        };\r\n\r\n        if (!category) {\r\n            return res.status(200).send({ status: true, message: \"Category Not Found\" });\r\n        };\r\n\r\n        let allProducts = await productModel.find({ category: category._id });\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: category,\r\n            products: allProducts,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in getCategoryById API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\n// GET CATEGORY BY SERVICE SEARCH {allProductSearchByKeywords}\r\nconst getProductByKeywords  = async (req, res) => {\r\n    try {\r\n        let { service_search } = req.body;\r\n        if (!service_search) {\r\n            return res.status(400).send({ status: false, message: \"Search parameter is required\"});\r\n        };\r\n\r\n        let filter = {\r\n            $or: [\r\n            { name: { $regex: service_search, $options: \"i\" } },\r\n            { subTitle: { $regex: service_search, $options: \"i\" } }, \r\n            { description: { $regex: service_search, $options: \"i\" } }\r\n            ],\r\n        };\r\n\r\n        let products = await productModel.find(filter);\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            products: products,\r\n        });\r\n\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in getProductByKeywords API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET ALL CATEGORIES\r\nconst getAllCategories = async (req, res) => {\r\n    try {\r\n        let { key } = req.params;\r\n        if (!key) {\r\n            return res.status(400).send({ status: false, message: \"Bad Request!!!\" });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\" });\r\n        };\r\n\r\n        let allCategories = await categoryModel.find({});\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: allCategories,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in getAllCategories API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n// UPDATE CATEGORY BY CATEGORY ID\r\nconst updateCategory = async (req, res) => {\r\n    try {\r\n        let { key } = req.params;\r\n        if (!key) {\r\n            return res.status(400).send({ status: false, message: \"Bad Request!!!\" });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\" });\r\n        };\r\n\r\n        let { categoryId } = req.params;\r\n        if (!categoryId) {\r\n            return res.status(400).send({ status: false, message: \"Category Id is required\" });\r\n        };\r\n\r\n        if (!isValidObjectId(categoryId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Category Id\" });\r\n        };\r\n\r\n        let category = await categoryModel.findById(categoryId);\r\n\r\n        if (!category) {\r\n            return res.status(404).send({ status: false, message: \"Category Not Found\" });\r\n        };\r\n\r\n        let reqBody = req.body;\r\n\r\n        if (\"name\" in reqBody) {\r\n            category.name = reqBody.name;\r\n        };\r\n\r\n        if (\"description\" in reqBody) {\r\n            category.description = reqBody.description;\r\n        };\r\n\r\n        if (\"FileUpload\" in reqBody) {\r\n            let { File_Extension, File_Path, File_data, File_name } = req.body.FileUpload;\r\n\r\n            // console.log(\"reqbody: \", reqBody);\r\n\r\n            let decodedData = Buffer.from(File_data, \"base64\");\r\n\r\n            let currentIpAddress = getCurrentIPAddress();\r\n            let imgRelativePath = \"/categoryImages/\";\r\n            let imgUniqName = uuid.v4() + File_Extension;\r\n            let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n            let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"categoryImages\", imgUniqName);\r\n\r\n            let oldImgName = category.category_image.fileName;\r\n            let oldImgPath = path.join(__dirname, \"..\", \"..\", \"categoryImages\", oldImgName);\r\n            \r\n            if (fs.existsSync(oldImgPath)) {\r\n                fs.unlinkSync(oldImgPath);\r\n            };\r\n\r\n            fs.writeFileSync(imgSavingPath, decodedData);\r\n\r\n            let newImgObj = {\r\n                fileName: imgUniqName,\r\n                filePath: imgFullUrl,\r\n            };\r\n\r\n            category.category_image = newImgObj;\r\n        };\r\n\r\n        await category.save();\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Category updated successfully\",\r\n            data: category,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in updateCategory API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\n// DELETE CATEGORY\r\nconst deleteCategory = async (req, res) => {\r\n    try {\r\n        let { key } = req.params;\r\n        if (!key) {\r\n            return res.status(400).send({ status: false, message: \"Bad Request!!!\" });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\" });\r\n        };\r\n        \r\n        let { categoryId } = req.params;\r\n        if (!categoryId) {\r\n            return res.status(400).send({ status: false, message: \"CategoryId is required\" });\r\n        };\r\n\r\n        let category = await categoryModel.findById(categoryId);\r\n\r\n        if (!category) {\r\n            return res.status(404).send({ status: false, message: \"No category found with this category Id\"})\r\n        };\r\n\r\n        await categoryModel.deleteOne({ _id: categoryId });\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Category deleted successfully\",\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in deleteCategory API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\nmodule.exports = {\r\n    addCategory,\r\n    getCategoryById,\r\n    getProductByKeywords,\r\n    getAllCategories,\r\n    updateCategory,\r\n    deleteCategory,\r\n};\r\n","const bookingModel = require(\"../models/bookingModel\");\r\nconst categoryModel = require(\"../models/categoryModel\");\r\nconst bannerImageModel = require(\"../models/bannerImageModel\");\r\nconst ratingModel = require(\"../models/ratingModel\");\r\nconst { getCurrentIPAddress } = require(\"../uitls/utils\");\r\n\r\nconst uuid = require(\"uuid\");\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");\r\nconst { port, adminSecretKey } = require(\"../config/config\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\nconst logger = require(\"../config/logger.config\");\r\n\r\n// DASHBOARD API\r\nconst getDashboard = async (req, res) => {\r\n    try {\r\n        const { key, userId } = req.params;\r\n        if (!key) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Key is required\",\r\n            });\r\n        }\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: \"Not Authorized\",\r\n            });\r\n        }\r\n\r\n        // let categories = await categoryModel.find({});\r\n\r\n        // let myAllBookings = null;\r\n        // if (userId) {\r\n        //     myAllBookings = await bookingModel.find({ userId });\r\n        // }\r\n\r\n        let bannerObj = await bannerImageModel.findOne({});\r\n\r\n        let bannerImages;\r\n        if (bannerObj) {\r\n            bannerImages = bannerObj.bannerImages ? bannerObj.bannerImages : null;\r\n        };\r\n\r\n        let ratings = await ratingModel.find({});\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            ratings,\r\n            bannerImages: bannerImages ? bannerImages : [],\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n        logger.error(`Error in getDashboard API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// UPDATE BANNER IMAGES\r\nconst updateBannerImages = async (req, res) => {\r\n    try {\r\n        let { key } = req.params;\r\n        if (!key) {\r\n            return res.status(400).send({ status: false, message: \"Bad Request!!!\" });\r\n        }\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\" });\r\n        }\r\n\r\n        let bannerObj = await bannerImageModel.findOne({});\r\n\r\n        if (!bannerObj) {\r\n            bannerObj = await bannerImageModel.create({ bannerImages: [] });\r\n        }\r\n\r\n        let { ImageModel } = req.body;\r\n\r\n        let parsedData = JSON.parse(ImageModel);\r\n\r\n        let bannerImage = req.files.bannerImage;\r\n\r\n        if (!bannerImage) {\r\n            return res.status(400).send({ status: false, message: \"No banner image uploaded\" });\r\n        }\r\n\r\n        let index = parsedData.index; //{\"isNewPick\":false,\"index\":1,\"img_id\":\"64ffebc1f3bfc5d77220193b\",\"imageName\":\"1694493633669-432139964.jpg\"}\r\n        let img_id = parsedData.img_id ? parsedData.img_id : \"\";\r\n        let imageName = parsedData.imageName;\r\n        let isNewPick = parsedData.isNewPick;\r\n\r\n        let bannerImgFolder = path.join(__dirname, \"..\", \"..\", \"bannerImages\");\r\n\r\n        if (!fs.existsSync(bannerImgFolder)) {\r\n            fs.mkdirSync(bannerImgFolder);\r\n        }\r\n\r\n        let currentIpAddress = getCurrentIPAddress();\r\n        let imgRelativePath = \"/bannerImages/\";\r\n        let imgUniqName = uuid.v4() + \".\" + bannerImage.name.split(\".\").pop();\r\n        let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n        let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"bannerImages\", imgUniqName);\r\n\r\n        if (!isNewPick) {\r\n            let oldImage = bannerObj.bannerImages[index].imageName;\r\n            if (oldImage) {\r\n                let oldImgPath = path.join(__dirname, \"..\", \"..\", \"bannerImages\", oldImage);\r\n                if (fs.existsSync(oldImgPath)) {\r\n                    fs.unlinkSync(oldImgPath);\r\n                }\r\n            }\r\n\r\n            bannerImage.mv(imgSavingPath, (err) => {\r\n                if (err) throw err;\r\n            });\r\n\r\n            let updatedBannerObj = {\r\n                imageName: imgUniqName,\r\n                imagePath: imgFullUrl,\r\n            };\r\n\r\n            bannerObj.bannerImages[index] = updatedBannerObj;\r\n\r\n            await bannerObj.save();\r\n\r\n            let bannerImages = bannerObj.bannerImages;\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Banner updated successfully\",\r\n                data: bannerImages,\r\n            });\r\n        } else {\r\n            bannerImage.mv(imgSavingPath, (err) => {\r\n                if (err) throw err;\r\n            });\r\n\r\n            let newBannerObj = {\r\n                imageName: imgUniqName,\r\n                imagePath: imgFullUrl,\r\n            };\r\n\r\n            bannerObj.bannerImages.push(newBannerObj);\r\n\r\n            await bannerObj.save();\r\n\r\n            let bannerImages = bannerObj.bannerImages;\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Banner added successfully\",\r\n                data: bannerImages,\r\n            });\r\n        }\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n        logger.error(`Error in updateBannerImages API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// DELETE BANNER IMAGE BY ID\r\nconst deleteBannerImage = async (req, res) => {\r\n    try {\r\n        let { imageId, key } = req.params;\r\n        if (!imageId || !key) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        }\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\" });\r\n        }\r\n\r\n        let bannerObj = await bannerImageModel.findOne();\r\n\r\n        if (!bannerObj) {\r\n            return res.status(400).send({ status: false, message: \"Not Found!!!\" });\r\n        }\r\n\r\n        if (bannerObj.bannerImages.length) {\r\n            for (let i = 0; i < bannerObj.bannerImages.length; i++) {\r\n                if (imageId === bannerObj.bannerImages[i]._id.toString()) {\r\n                    let imgName = bannerObj.bannerImages[i].imageName;\r\n                    let imgPath = path.join(__dirname, \"..\", \"..\", \"bannerImages\", imgName);\r\n\r\n                    if (fs.existsSync(imgPath)) {\r\n                        fs.unlinkSync(imgPath);\r\n                    }\r\n\r\n                    let arr = bannerObj.bannerImages;\r\n                    arr.splice(i, 1);\r\n                    bannerObj.bannerImages = arr;\r\n\r\n                    await bannerObj.save();\r\n                }\r\n            }\r\n        }\r\n\r\n        let bannerImages = bannerObj.bannerImages;\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Banner deleted successfully\",\r\n            data: bannerImages,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n        logger.error(`Error in deleteBannerImage API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    getDashboard,\r\n    updateBannerImages,\r\n    deleteBannerImage,\r\n};\r\n","const doctorModel = require(\"../models/doctorModel\");\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");\r\nconst uuid = require(\"uuid\");\r\nconst logger = require(\"../config/logger.config\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\nlet { getCurrentIPAddress } = require(\"../uitls/utils\");\r\nlet { port, adminSecretKey } = require(\"../config/config\");\r\n\r\n// ADD DOCTOR\r\nconst addDoctor = async (req, res) => {\r\n    try {\r\n        const { key } = req.params;\r\n        if (!key) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Key is required\",\r\n            });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: \"Not Authorized\",\r\n            });\r\n        };\r\n\r\n        const { name, email, phone, experience, description } = req.body;\r\n\r\n        let imgObj = null;\r\n\r\n        if (\"FileUpload\" in req.body) {\r\n            let { File_Extension, File_Path, File_data, File_name } = req.body.FileUpload;\r\n\r\n            let decodedData = Buffer.from(File_data, \"base64\");\r\n\r\n            // let { profilePic } = req.files;\r\n\r\n            let doctorImgFolder = path.join(__dirname, \"..\", \"..\", \"doctorsImages\");\r\n\r\n            if (!fs.existsSync(doctorImgFolder)) {\r\n                fs.mkdirSync(doctorImgFolder);\r\n            }\r\n\r\n            let currentIpAddress = getCurrentIPAddress();\r\n            let imgRelativePath = \"/doctorsImages/\";\r\n            let imgUniqName = uuid.v4() + File_Extension;\r\n            let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n            let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"doctorsImages\", imgUniqName);\r\n\r\n            fs.writeFileSync(imgSavingPath, decodedData);\r\n\r\n            // profilePic.mv(imgSavingPath, (err) => {\r\n            //     if (err) throw err;\r\n            // })\r\n\r\n            imgObj = {\r\n                fileName: imgUniqName,\r\n                filePath: imgFullUrl,\r\n            };\r\n        };\r\n\r\n        let doctorData = {\r\n            name,\r\n            email,\r\n            phone,\r\n            experience,\r\n            description,\r\n            profilePic: imgObj,\r\n        };\r\n\r\n        let doctor = await doctorModel.create(doctorData);\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Doctor added successfully\",\r\n            data: doctor,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in addDoctor API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET DOCTOR BY ID\r\nconst getDoctorById = async (req, res) => {\r\n    try {\r\n        let { key, doctorId } = req.params;\r\n\r\n        if (!key || !doctorId) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"All fields are required\",\r\n            });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: \"Not Authorized\",\r\n            });\r\n        };\r\n\r\n        if (!isValidObjectId(doctorId)) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Invalid doctorId\",\r\n            });\r\n        };\r\n\r\n        let doctor = await doctorModel.findById(doctorId);\r\n\r\n        if (!doctor) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Doctor not found\",\r\n            });\r\n        };\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: doctor,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in getDoctorById API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ALL DOCTORS\r\nconst getAllDoctors = async (req, res) => {\r\n    try {\r\n        const { key } = req.params;\r\n        if (!key) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Key is required\",\r\n            });\r\n        }\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: \"Not Authorized\",\r\n            });\r\n        }\r\n\r\n        let doctors = await doctorModel.find({});\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: doctors,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in getAllDoctors API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// UPDATE DOCTOR\r\nconst updateDoctor = async (req, res) => {\r\n    try {\r\n        let { key, doctorId } = req.params;\r\n\r\n        if (!key || !doctorId) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"All fields are required\",\r\n            });\r\n        }\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: \"Not Authorized\",\r\n            });\r\n        }\r\n\r\n        if (!isValidObjectId(doctorId)) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Invalid doctorId\",\r\n            });\r\n        }\r\n\r\n        let d = await doctorModel.findById(doctorId);\r\n\r\n        if (!d) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Doctor not found\",\r\n            });\r\n        }\r\n\r\n        let e = req.body;\r\n\r\n        if (\"name\" in e) {\r\n            d.name = e.name;\r\n        }\r\n\r\n        if (\"email\" in e) {\r\n            d.email = e.email;\r\n        }\r\n\r\n        if (\"phone\" in e) {\r\n            d.phone = e.phone;\r\n        }\r\n\r\n        if (\"experience\" in e) {\r\n            d.experience = e.experience;\r\n        }\r\n\r\n        if (\"description\" in e) {\r\n            d.description = e.description;\r\n        }\r\n\r\n        if (\"FileUpload\" in req.body) {\r\n            let oldImgName = d.profilePic.fileName;\r\n            if (oldImgName) {\r\n                let oldImgPath = path.join(__dirname, \"..\", \"..\", \"doctorsImages\", oldImgName);\r\n                if (fs.existsSync(oldImgPath)) {\r\n                    fs.unlinkSync(oldImgPath);\r\n                }\r\n            }\r\n\r\n            let { File_Extension, File_Path, File_data, File_name } = req.body.FileUpload;\r\n\r\n            let decodedData = Buffer.from(File_data, \"base64\");\r\n\r\n            let currentIpAddress = getCurrentIPAddress();\r\n            let imgRelativePath = \"/doctorsImages/\";\r\n            let imgUniqName = uuid.v4() + File_Extension;\r\n            let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n            let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"doctorsImages\", imgUniqName);\r\n\r\n            fs.writeFileSync(imgSavingPath, decodedData);\r\n\r\n            let imgObj = {\r\n                fileName: imgUniqName,\r\n                filePath: imgFullUrl,\r\n            };\r\n\r\n            d.profilePic = imgObj;\r\n        }\r\n\r\n        await d.save();\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Doctor details updated\",\r\n            data: d,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in updateDoctor API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// DELETE DOCTOR\r\nconst deleteDoctor = async (req, res) => {\r\n    try {\r\n        let { key, doctorId } = req.params;\r\n\r\n        if (!key || !doctorId) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"All fields are required\",\r\n            });\r\n        }\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: \"Not Authorized\",\r\n            });\r\n        }\r\n\r\n        if (!isValidObjectId(doctorId)) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Invalid doctorId\",\r\n            });\r\n        }\r\n\r\n        let d = await doctorModel.findById(doctorId);\r\n\r\n        if (!d) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Doctor not found\",\r\n            });\r\n        }\r\n\r\n        let oldImgName = d.profilePic.fileName;\r\n        if (oldImgName) {\r\n            let oldImgPath = path.join(__dirname, \"..\", \"..\", \"doctorsImages\", oldImgName);\r\n            if (fs.existsSync(oldImgPath)) {\r\n                fs.unlinkSync(oldImgPath);\r\n            };\r\n        };\r\n\r\n        await doctorModel.deleteOne({ _id: doctorId });\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: 'Doctor details deleted successfully'\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in deleteDoctor API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    addDoctor,\r\n    getDoctorById,\r\n    getAllDoctors,\r\n    updateDoctor,\r\n    deleteDoctor,\r\n};\r\n","const ratingModel = require('../models/ratingModel');\r\nlet { getCurrentIPAddress } = require(\"../uitls/utils\");\r\nconst uuid = require(\"uuid\");\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");\r\nconst { port, adminSecretKey } = require(\"../config/config\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\nconst logger = require(\"../config/logger.config\");\r\n\r\n\r\n// ADD RATING\r\nconst addRating = async (req, res) => {\r\n    try {\r\n        let { key } = req.params;\r\n\r\n        if (!key) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"key is required\"\r\n            });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: \"Not authorized\"\r\n            });\r\n        };\r\n\r\n        let { name, description, Rating } = req.body;\r\n\r\n        let { File_Extension, File_Path, File_data, File_name } = req.body.FileUpload;\r\n\r\n        let decodedData = Buffer.from(File_data, \"base64\");\r\n\r\n        // let { picture } = req.files;\r\n\r\n        let ratingImgFolder = path.join(__dirname, \"..\", \"..\", \"ratingImages\");\r\n\r\n        if (!fs.existsSync(ratingImgFolder)) {\r\n            fs.mkdirSync(ratingImgFolder);\r\n        }\r\n\r\n        let currentIpAddress = getCurrentIPAddress();\r\n        let imgRelativePath = \"/ratingImages/\";\r\n        let imgUniqName = uuid.v4() + File_Extension;\r\n        let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n        let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"ratingImages\", imgUniqName);\r\n\r\n        fs.writeFileSync(imgSavingPath, decodedData);\r\n        // picture.mv(imgSavingPath, (err) => {\r\n        //     if (err) throw err;\r\n        // });\r\n\r\n        let imgObj = {\r\n            imageName: imgUniqName,\r\n            imagePath: imgFullUrl,\r\n        };\r\n\r\n\r\n        let ratingObj = {\r\n            name,\r\n            description,\r\n            Rating,\r\n            picture: imgObj,\r\n        };\r\n\r\n        let newRating = await ratingModel.create(ratingObj);\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Rating Added\",\r\n            data: newRating,\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\nmodule.exports = {\r\n    addRating\r\n};","const userModel = require(\"../models/userModel\");\r\nconst adminModel = require(\"../models/adminModel\");\r\nconst deletedUserModel = require('../models/deleteUserModel');\r\nconst uuid = require(\"uuid\");\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");\r\nconst { getCurrentIPAddress, generateRandomAlphaNumericID } = require(\"../uitls/utils\");\r\nconst { port } = require(\"../config/config\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\nconst bookingModel = require(\"../models/bookingModel\");\r\n\r\nconst { adminSecretKey } = require('../config/config');\r\n\r\n\r\n// LOGIN USER\r\nconst authenticateUser = async (req, res) => {\r\n    try {\r\n        let { email, profilePic, name, userId } = req.body;\r\n\r\n        const isUserExists = await userModel.findOne({ userId: userId });\r\n\r\n        if (!isUserExists) {\r\n            let userObj = {\r\n                userId,\r\n                name,\r\n                email,\r\n                profilePic\r\n            };\r\n\r\n            let newUser = await userModel.create(userObj);\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Authentication successful\",\r\n                data: newUser\r\n            });\r\n        } else {\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Authentication successful\",\r\n                data: isUserExists,\r\n            });\r\n        };\r\n\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// REGISTER USER\r\nconst updateUser = async (req, res) => {\r\n    try {\r\n        const { userId } = req.params;\r\n\r\n        if (!userId) {\r\n            return res.status(400).send({ status: false, message: \"userId is required\"});\r\n        };\r\n\r\n        let user = await userModel.findOne({ userId });\r\n\r\n        if (!user) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"User not found\",\r\n            });\r\n        };\r\n\r\n        let reqBody = req.body;\r\n\r\n        if (\"name\" in reqBody) {\r\n            user.name = reqBody.name;\r\n        };\r\n\r\n        if (\"phone\" in reqBody) {\r\n            user.phone = reqBody.phone;\r\n        };\r\n\r\n        if (\"gender\" in reqBody) {\r\n            user.gender = reqBody.gender;\r\n        };\r\n\r\n        if (\"date_of_birth\" in reqBody) {\r\n            user.date_of_birth = reqBody.date_of_birth;\r\n        };\r\n\r\n        if (\"Address\" in reqBody) {\r\n            if (\"address\" in reqBody.Address) {\r\n                user.Address.address = reqBody.Address.address;\r\n            };\r\n\r\n            if (\"apartment\" in reqBody.Address) {\r\n                user.Address.apartment = reqBody.Address.apartment;\r\n            };\r\n\r\n            if (\"city\" in reqBody.Address) {\r\n                user.Address.city = reqBody.Address.city;\r\n            };\r\n\r\n            if (\"post_code\" in reqBody.Address) {\r\n                user.Address.post_code = reqBody.Address.post_code;\r\n            };\r\n\r\n            if (\"state\" in reqBody.Address) {\r\n                user.Address.state = reqBody.Address.state;\r\n            }\r\n        };\r\n\r\n        if (\"education\" in reqBody) {\r\n            user.education = reqBody.education;\r\n        }\r\n\r\n        await user.save();\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"User updated successfully\",\r\n            data: user,\r\n        });\r\n\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET USER BY ID\r\nconst getUserById = async (req, res) => {\r\n    try {\r\n        let { userId, key } = req.params;\r\n\r\n        if (!userId || !key) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\"});\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\"});\r\n        };\r\n\r\n        let user = await userModel.findOne({ userId });\r\n\r\n        if (!user) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"User not found\",\r\n            });\r\n        };\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: user\r\n        });\r\n\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\n// GET ALL USERS\r\nconst getAllUsers = async (req, res) => {\r\n    try {\r\n        // let { key } = req.params;\r\n\r\n        // if (!key) {\r\n        //     return res.status(400).send({ status: false, message: \"key is required\"});\r\n        // };\r\n\r\n        // if (key !== adminSecretKey) {\r\n        //     return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\"});\r\n        // };\r\n\r\n        let users = await userModel.find({});\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: users\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\n// DELETE USER\r\nconst deleteUser = async (req, res) => {\r\n    try {\r\n        let { userId } = req.params;\r\n\r\n        if (!userId) {\r\n            return res.status(400).send({ status: false, message: \"userId is required\"});\r\n        };\r\n\r\n        let user = await userModel.findOne({ userId });\r\n\r\n        if (!user) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"User not found\",\r\n            });\r\n        };\r\n\r\n        const { reason, feedback} = req.body;\r\n\r\n        let userAllBookings = await bookingModel.find({ userId });\r\n\r\n        let userData = {\r\n            user,\r\n            userAllBookings\r\n        };\r\n\r\n        let jsonStr = JSON.stringify(userData);\r\n\r\n        await userModel.deleteOne({ userId });\r\n\r\n        let deletedUserData = {\r\n            userId,\r\n            deletedUserData: jsonStr,\r\n            reason,\r\n            feedback,\r\n            deletedAt: new Date().toLocaleString()\r\n        };\r\n\r\n        await deletedUserModel.create(deletedUserData);\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"User deleted successfully\",\r\n        });\r\n\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n\r\nmodule.exports = {\r\n    authenticateUser,\r\n    updateUser,\r\n    deleteUser,\r\n    getUserById,\r\n    getAllUsers\r\n};\r\n","class BaseError extends Error {\r\n    constructor(name, statusCode, description, details) {\r\n        super(description);\r\n        this.name = name;\r\n        this.statusCode = statusCode;\r\n        this.details = details;\r\n    }\r\n}\r\n\r\nmodule.exports = BaseError;","const { isValidObjectId } = require('mongoose');\r\nconst { tokenSecretKey } = require('../config/config');\r\nconst adminModel = require('../models/adminModel');\r\nconst jwt = require('jsonwebtoken');\r\n\r\n\r\n// AUTHENTICATION\r\nconst Authentication = async (req, res, next) => {\r\n    try {\r\n        let tokenWithBearer = req.headers[\"authorization\"];\r\n\r\n        if (!tokenWithBearer) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Token is required\"\r\n            });\r\n        };\r\n\r\n        let tokenArray = tokenWithBearer.split(\" \");\r\n        let token = tokenArray[1];\r\n\r\n        if (!token) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Invalid token\"\r\n            });\r\n        };\r\n\r\n        let decodedToken;\r\n\r\n        jwt.verify(token, tokenSecretKey, (err, decode) => {\r\n            if (err) {\r\n                throw err;\r\n            };\r\n\r\n            decodedToken = decode;\r\n            let loginUserId = decodedToken.adminId;\r\n            req[\"adminId\"] = loginUserId;\r\n            next();\r\n        })\r\n\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// AUTHORIZATION\r\nconst Authorization = async (req, res, next) => {\r\n    try {\r\n        let tokenId = req.adminId;\r\n        let { adminId } = req.params;\r\n\r\n        if (!isValidObjectId(adminId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid userId\"});\r\n        };\r\n\r\n        let admin = await adminModel.findById(adminId);\r\n\r\n        if (!admin){\r\n            return res.status(404).send({ status: false, message: \"Admin not found\"})\r\n        };\r\n\r\n        let AdminId = admin._id;\r\n\r\n        if ( tokenId.toString() !== AdminId.toString() ) {\r\n            return res.status(403).send({\r\n                status: false,\r\n                message: \"NOT AUTHORIZED!!!\"\r\n            })\r\n        };\r\n\r\n        next();\r\n    } catch (error) {   \r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\nmodule.exports = { Authentication, Authorization }","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\n\r\nconst adminSchema = new mongoose.Schema({\r\n    adminId: {\r\n        type: String,\r\n    },\r\n\r\n    sessionToken: {\r\n        type: String,\r\n    },\r\n\r\n    name: {\r\n        type: String,\r\n    },\r\n\r\n    email: {\r\n        type: String,\r\n    },\r\n\r\n    password: {\r\n        type: String,\r\n    },\r\n\r\n    mobile: {\r\n        type: String,\r\n    },\r\n\r\n    profilePic: {\r\n        picName: {\r\n            type: String,\r\n        },\r\n        picPath: {\r\n            type: String,\r\n        }\r\n    },\r\n}, {timestamps: true});\r\n\r\nmodule.exports = mongoose.model(\"Admin\", adminSchema);","const mongoose = require('mongoose');\r\n\r\nconst bannerImageSchema = new mongoose.Schema({\r\n    bannerImages: [\r\n        {\r\n            imageName: { type: String, default: \"\" },\r\n            imagePath: { type: String, default: \"\" }\r\n        }\r\n    ]\r\n}, { timestamps: true });\r\n\r\n\r\nmodule.exports = mongoose.model(\"BannerImage\", bannerImageSchema);","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst bookingSchema = new mongoose.Schema({\r\n    userId: {\r\n        type: String,\r\n    },\r\n\r\n    bookingId: {\r\n        type: String,\r\n    },\r\n\r\n    appointment_date: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    doctorInstructions: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    notes: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    files: [\r\n        {\r\n            fileName: {\r\n                type: String,\r\n                default: \"\"\r\n            },\r\n    \r\n            filePath: {\r\n                type: String,\r\n                default: \"\"\r\n            }\r\n        }\r\n    ],\r\n\r\n    doctor_name: {\r\n        type: String,\r\n    },\r\n\r\n    doctor_id: {\r\n        type: String,\r\n    },\r\n\r\n    slot: {\r\n        type: String,\r\n    },\r\n\r\n    notes_file: {\r\n        fileName: {\r\n            type: String,\r\n        },\r\n\t    filePath: {\r\n            type: String,\r\n        }\r\n    },\r\n\r\n    next_appointment_date: {\r\n        type: String,\r\n        default: \"\"\r\n    }\r\n\r\n}, {timestamps: true});\r\n\r\nmodule.exports = mongoose.model(\"Booking\", bookingSchema);","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst categorySchema = new mongoose.Schema({\r\n    name: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    description: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    category_image: {\r\n        fileName: {\r\n            type: String,\r\n            default: \"\"\r\n        },\r\n\r\n        filePath: {\r\n            type: String,\r\n            default: \"\"\r\n        }\r\n    },\r\n\r\n    cat_enum: {\r\n        type: String,\r\n        enum: [\"\", \"\"]\r\n    },\r\n    \r\n}, {timestamps: true});\r\n\r\nmodule.exports = mongoose.model(\"Category\", categorySchema);","const mongoose = require('mongoose');\r\n\r\n\r\nconst deletedUserSchema = new mongoose.Schema({\r\n    userId: {\r\n        type: String,\r\n    },\r\n\r\n    deletedUserData: {\r\n        type: String,\r\n    },\r\n\r\n    reason: {\r\n        type: String,\r\n    },\r\n\r\n    feedback: {\r\n        type: String,\r\n    },\r\n\r\n    deletedAt: {\r\n        type: String,\r\n    }\r\n}, {timestamps: true});\r\n\r\n\r\nmodule.exports = mongoose.model(\"DeletedUser\", deletedUserSchema);","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\n\r\nconst doctorSchema = new mongoose.Schema({\r\n    name: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    email: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    phone: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    profilePic: {\r\n        fileName: { type: String, default: \"\" },\r\n        filePath: { type: String, default: \"\" }\r\n    },\r\n\r\n    experience: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    description: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n}, {timestamps: true});\r\n\r\n\r\nmodule.exports = mongoose.model(\"Doctor\", doctorSchema);","const mongoose = require('mongoose');\r\n\r\nconst ratingSchema = new mongoose.Schema({\r\n    name: { type: String },\r\n    picture: {\r\n\t\timageName: { type: String },\r\n\t\timagePath: { type: String }\r\n\t},\r\n    description: { type: String },\r\n\tRating: { type: String }\r\n}, { timestamps: true });\r\n\r\n\r\nmodule.exports = mongoose.model(\"Rating\", ratingSchema);","const mongoose = require(\"mongoose\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst userSchema = new mongoose.Schema(\r\n    {\r\n        userId: {\r\n            type: String,\r\n            unique: true,\r\n            default: \"\"\r\n        },\r\n\r\n        name: {\r\n            type: String,\r\n            required: true,\r\n            trim: true,\r\n        },\r\n\r\n        profilePic: {\r\n            type: String,\r\n        },\r\n\r\n        gender: {\r\n            type: String,\r\n            enum: [\"MALE\", \"FEMALE\", \"OTHER\", \"UNDEFINED\"],\r\n            default: \"UNDEFINED\",\r\n        },\r\n\r\n        Address: {\r\n            address: {\r\n                type: String,\r\n                default: \"\"\r\n            },\r\n\r\n            apartment: {\r\n                type: String,\r\n                default: \"\"\r\n            },\r\n\r\n            city: {\r\n                type: String,\r\n                default: \"\"\r\n            },\r\n\r\n            post_code: {\r\n                type: String,\r\n                default: \"\"\r\n            },\r\n\r\n            state: {\r\n                type: String,\r\n                default: \"\"\r\n            }\r\n        },\r\n\r\n        email: {\r\n            type: String,\r\n            default: \"\"\r\n        },\r\n\r\n        phone: {\r\n            type: String,\r\n            default: \"\"\r\n        },\r\n\r\n        date_of_birth: {\r\n            type: String,\r\n            default: \"\"\r\n        },\r\n    },\r\n    { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"User\", userSchema);\r\n","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { \r\n    createAdmin, \r\n    adminLogin, \r\n    getOneDayBookings,\r\n    getOneWeekBookings,\r\n    getOneMonthBookings,\r\n    getOneYearBookings,\r\n    getAllBookingsOfUser,\r\n} = require('../../controllers/adminController');\r\n\r\nconst { Authentication, Authorization } = require('../../middlewares/auth');\r\n\r\n// SIGNUP ADMIN/CONSULTANT\r\nrouter.post(\"/api/v1/createSuperAdmin\", createAdmin);\r\n\r\n// LOGIN ADMIN/CONSULTANT\r\nrouter.post(\"/api/v1/loginSuperAdmin\", adminLogin);\r\n\r\n// GET ONE DAY BOOKINGS (ADMIN API) // date format: 2024-05-02\r\nrouter.get(\"/api/v1/getOneDayBookings/:adminId/:sessionToken/:date?\", getOneDayBookings);\r\n\r\n// GET ONE WEEK BOOKINGS (ADMIN API)\r\nrouter.get(\"/api/v1/getOneWeekBookings/:adminId/:sessionToken/:startDate?/:endDate?\", getOneWeekBookings);\r\n\r\n// GET ONE MONTH BOOKINGS (ADMIN API)\r\nrouter.get(\"/api/v1/getOneMonthBookings/:adminId/:sessionToken/:month/:year\", getOneMonthBookings);\r\n\r\n// GET ONE YEAR BOOKINGS (ADMIN API)\r\nrouter.get(\"/api/v1/getOneYearBookings/:adminId/:sessionToken/:year\", getOneYearBookings);\r\n\r\n// GET ALL BOOKINGS OF AN USER (ADMIN API)\r\nrouter.get(\"/api/v1/getUserAllBookings/:adminId/:sessionToken/:userId\", getAllBookingsOfUser);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { createBooking, getSpecificBooking, getUserAllBookings, getAllBookings, getAllSlotsOfADate, updateBookingStatus, submitBookingByDoctor, updateBookingFilesByDoctor } = require('../../controllers/bookingController');\r\n\r\n// CREATE BOOKING\r\nrouter.post(\"/api/v1/createBooking/:userId\", createBooking);\r\n\r\n// GET AN SPECIFIC BOOKING OF A USER\r\nrouter.get(\"/api/v1/getSpecificBooking/:bookingId\", getSpecificBooking);\r\n\r\n// GET ALL BOOKINGS OF AN USER\r\nrouter.get(\"/api/v1/getUserAllBookings/:userId\", getUserAllBookings);\r\n\r\n// GET ALL BOOKINGS\r\nrouter.get(\"/api/v1/getAllBookings/:key\", getAllBookings);\r\n\r\n// GET ALL BOOKED SLOTS OF A DATE\r\nrouter.get(\"/api/v1/getAllSlots/:date\", getAllSlotsOfADate);\r\n\r\n// UPDATE BOOKING STATUS\r\nrouter.put(\"/api/v1/updateBookingStatus/:bookingId\", updateBookingStatus);\r\n\r\n// SUBMIT BOOKING DATA BY DOCTOR\r\nrouter.put(\"/api/v1/submitBookingData/:bookingId\", submitBookingByDoctor);\r\n\r\n// SUBMIT BOOKING FILES BY DOCTOR\r\nrouter.post(\"/api/v1/submitBookingFiles/:bookingId\", updateBookingFilesByDoctor);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { \r\n    addCategory, \r\n    getCategoryById,\r\n    getProductByKeywords,\r\n    getAllCategories,\r\n    updateCategory,\r\n    deleteCategory,\r\n } = require('../../controllers/categoryController');\r\n\r\n// ADD CATEGORY\r\nrouter.post(\"/api/v1/addCategory/:key\", addCategory);\r\n\r\n// GET CATEGORY BY ID\r\nrouter.post(\"/api/v1/viewService/:categoryId\", getCategoryById);\r\n\r\n// SEARCH PRODUCTS BY KEYWORDS\r\nrouter.post(\"/api/v1/allProductSearchByKeywords\", getProductByKeywords);\r\n\r\n// GET ALL CATEGORIES\r\nrouter.get(\"/api/v1/getAllCategories/:key\", getAllCategories);\r\n\r\n// UPDATE CATEGORY\r\nrouter.put(\"/api/v1/updateCategory/:key/:categoryId\", updateCategory);\r\n\r\n// DELETE CATEGORY\r\nrouter.delete(\"/api/v1/deleteCategory/:key/:categoryId\", deleteCategory);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { getDashboard, updateBannerImages, deleteBannerImage } = require('../../controllers/dashboard');\r\n\r\n// GET DASHBOARD\r\nrouter.get(\"/api/v1/getDashboard/:key/:userId?\", getDashboard);\r\n\r\n// ADD/UPDATE BANNER IMAGES\r\nrouter.put(\"/api/v1/addOrUpdateBanner/:key\", updateBannerImages);\r\n\r\n// DELETE BANNER IMAGE\r\nrouter.delete(\"/api/v1/deleteBanner/:imageId/:key\", deleteBannerImage);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { \r\n    addDoctor,\r\n    getDoctorById,\r\n    getAllDoctors,\r\n    updateDoctor,\r\n    deleteDoctor\r\n} = require('../../controllers/doctorController');\r\n\r\n// ADD DOCTOR\r\nrouter.post('/api/v1/addDoctor/:key', addDoctor);\r\n\r\n// GET DOCTOR BY ID\r\nrouter.get('/api/v1/getDoctorById/:key/:doctorId', getDoctorById);\r\n\r\n// GET ALL DOCTORS\r\nrouter.get('/api/v1/getAllDoctors/:key', getAllDoctors);\r\n\r\n// UPDATE DOCTOR\r\nrouter.put('/api/v1/updateDoctor/:key/:doctorId', updateDoctor);\r\n\r\n// DELETE DOCTOR\r\nrouter.delete('/api/v1/deleteDoctor/:key/:doctorId', deleteDoctor);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { \r\n    addRating\r\n} = require('../../controllers/ratingController');\r\n\r\n// ADD RATING TO A HOSPITAL\r\nrouter.post(\"/api/v1/addRating/:key\", addRating);\r\n\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst {\r\n    authenticateUser,\r\n    updateUser,\r\n    getAllUsers,\r\n    getUserById,\r\n    deleteUser, \r\n    \r\n} = require('../../controllers/userController');\r\n\r\n// AUTHENTICATE USER\r\nrouter.post(\"/api/v1/authenticateUser\", authenticateUser);\r\n\r\n// GET USER BY ID\r\nrouter.get(\"/api/v1/getUser/:userId/:key\", getUserById);\r\n\r\n// GET ALL USERS\r\nrouter.get(\"/api/v1/users/:key\", getAllUsers);\r\n\r\n// REGISTER USER\r\nrouter.post(\"/api/v1/updateUser/:userId\", updateUser);\r\n\r\n// DELETE USER BY USER ID\r\nrouter.delete(\"/api/v1/deleteUser/:userId\", deleteUser);\r\n\r\n// GET ALL USERS\r\nrouter.get(\"/api/v1/getAllUsers\", getAllUsers);\r\n\r\n\r\nmodule.exports = router;","const BaseError = require('../errors/base.error');\r\nconst { StatusCodes } = require('http-status-codes');\r\n\r\nfunction errorHandler(err, req, res, next) {\r\n    if (err instanceof BaseError) {\r\n        return res.status(err.statusCode).json({\r\n            success: false,\r\n            message: err.message,\r\n            err: err.details,\r\n            data: {}\r\n        });\r\n    };\r\n\r\n    return res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({\r\n        success: false,\r\n        message: \"Something went wrong\",\r\n        err: err,\r\n        data: {}\r\n    });\r\n};\r\n\r\nmodule.exports = { errorHandler };","const os = require(\"os\");\r\n\r\n// GET CURRENT IP ADDRESS\r\nlet getCurrentIPAddress = () => {\r\n    let networkInterfaces = os.networkInterfaces();\r\n    let ipAddress = Object.values(networkInterfaces)\r\n        .flat()\r\n        .filter((iface) => iface.family === \"IPv4\" && !iface.internal)\r\n        .map((iface) => iface.address)[0];\r\n    return ipAddress;\r\n};\r\n\r\n// Generate Random AlphaNumeric ID of given length\r\nfunction generateRandomAlphaNumericID(length) {\r\n    let id = \"\";\r\n    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n\r\n    for (let i = 0; i < length; i++) {\r\n        const randomIndex = Math.floor(Math.random() * characters.length);\r\n        id += characters[randomIndex];\r\n    }\r\n    return id;\r\n};\r\n\r\nmodule.exports = {\r\n    getCurrentIPAddress,\r\n    generateRandomAlphaNumericID,\r\n};\r\n","module.exports = require(\"bcrypt\");","module.exports = require(\"body-parser\");","module.exports = require(\"compression\");","module.exports = require(\"cors\");","module.exports = require(\"dotenv\");","module.exports = require(\"express\");","module.exports = require(\"express-fileupload\");","module.exports = require(\"express-mongo-sanitize\");","module.exports = require(\"helmet\");","module.exports = require(\"hpp\");","module.exports = require(\"http-status-codes\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"mongoose\");","module.exports = require(\"uuid\");","module.exports = require(\"winston\");","module.exports = require(\"winston-mongodb\");","module.exports = require(\"fs\");","module.exports = require(\"os\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst fileUpload = require('express-fileupload');\r\nconst cors = require(\"cors\");\r\nconst helmet = require('helmet');\r\n// const rateLimit = require('express-rate-limit');\r\nconst compression = require('compression');\r\n// const xss = require('xss');\r\nconst mongoSanitize = require('express-mongo-sanitize');\r\nconst hpp = require('hpp');\r\n\r\n\r\nconst { port } = require('./src/config/config');\r\nconst { connectToDatabase } = require('./src/config/db.config');\r\nconst { errorHandler } = require('./src/uitls/errorHandler');\r\n\r\nconst app = express();\r\n\r\napp.use(helmet());\r\napp.use(cors());\r\napp.use(compression());\r\n// app.use(xss());\r\napp.use(mongoSanitize());\r\napp.use(hpp()); // HTTP Parameter Pollution prevention\r\napp.use(express.json({ limit: \"50mb\" }));\r\napp.use(express.urlencoded({ extended: true, limit: \"50mb\" }));\r\napp.use(bodyParser.json({ limit: \"50mb\" }));\r\napp.use(bodyParser.text());\r\napp.use(fileUpload());\r\napp.use(cors());\r\n\r\nconst adminRoutes = require('./src/routes/v1/adminRoutes');\r\nconst userRoutes = require('./src/routes/v1/userRoutes');\r\nconst categoryRoutes = require('./src/routes/v1/categoryRoutes');\r\nconst bookingRoutes = require(\"./src/routes/v1/bookingRoutes\");\r\nconst dashboardRoutes = require(\"./src/routes/v1/dashboardRoutes\");\r\nconst doctorRoutes = require('./src/routes/v1/doctorRoutes');\r\nconst ratingRoutes = require('./src/routes/v1/ratingRoutes');\r\n\r\n// Content Security Policy\r\napp.use(\r\n    helmet.contentSecurityPolicy({\r\n        directives: {\r\n            defaultSrc: [\"'self'\"],\r\n            scriptSrc: [\"'self'\", \"'unsafe-inline'\"],\r\n            objectSrc: [\"'none'\"],\r\n            upgradeInsecureRequests: [],\r\n        },\r\n    })\r\n);\r\n\r\n// HTTP Strict Transport Security (HSTS)\r\napp.use(\r\n    helmet.hsts({\r\n        maxAge: 31536000, // 1 year\r\n        includeSubDomains: true,\r\n        preload: true,\r\n    })\r\n);\r\n\r\napp.use(\"/userImages\", express.static(__dirname + \"/userImages\"));\r\napp.use(\"/doctorImages\", express.static(__dirname + \"/doctorImages\"));\r\napp.use(\"/categoryImages\", express.static(__dirname + \"/categoryImages\"));\r\napp.use(\"/bannerImages\", express.static(__dirname + \"/bannerImages\"));\r\napp.use(\"/courseImages\", express.static(__dirname + \"/courseImages\"));\r\napp.use(\"/uploads\", express.static(__dirname + \"/uploads\"));\r\napp.use(\"/bookings\", express.static(__dirname + \"/bookings\"));\r\napp.use(\"/ratingImages\", express.static(__dirname + \"/ratingImages\"));\r\n\r\n\r\napp.use(\"/\", adminRoutes);\r\napp.use(\"/\", userRoutes);\r\napp.use(\"/\", categoryRoutes);\r\napp.use(\"/\", bookingRoutes);\r\napp.use(\"/\", dashboardRoutes);\r\napp.use(\"/\", doctorRoutes);\r\napp.use(\"/\", ratingRoutes);\r\n\r\napp.get(\"/\", (req, res) => {\r\n    res.send(\"<h1>Doctor App is Up and Running</h1>\");\r\n});\r\n\r\n// Last middleware if any error comes\r\napp.use(errorHandler);\r\n\r\nconst server = app.listen(port, async() => {\r\n    console.log('App is running on port', port);\r\n    // logger.info('Server started on port ' + port, { meta: { timestamp: new Date().toISOString() } });\r\n    await connectToDatabase;\r\n});\r\n\r\n// Handling unhandled promise rejections\r\nprocess.on('unhandledRejection', (reason, promise) => {\r\n    console.error('Unhandled Rejection at:', promise, 'reason:', reason);\r\n    // Close the server and exit the process\r\n    server.close(() => {\r\n        process.exit(1);\r\n    });\r\n});\r\n\r\n// Handling uncaught exceptions\r\nprocess.on('uncaughtException', (err) => {\r\n    console.error('Uncaught Exception thrown:', err);\r\n    // Close the server and exit the process\r\n    server.close(() => {\r\n        process.exit(1);\r\n    });\r\n});\r\n\r\n// Handling process termination signals for graceful shutdown\r\nprocess.on('SIGTERM', () => {\r\n    console.log('SIGTERM signal received: closing HTTP server');\r\n    server.close(() => {\r\n        console.log('HTTP server closed');\r\n        process.exit(0);\r\n    });\r\n});\r\n\r\nprocess.on('SIGINT', () => {\r\n    console.log('SIGINT signal received: closing HTTP server');\r\n    server.close(() => {\r\n        console.log('HTTP server closed');\r\n        process.exit(0);\r\n    });\r\n});\r\n"],"names":["config","module","exports","mongoDbUrl","process","env","MONGO_DB_URL","logDbUrl","LOG_DB_URL","tokenSecretKey","JWT_SECRET","port","PORT","adminSecretKey","ADMIN_SECRET_KEY","mongoose","connect","maxPoolSize","connectToDatabase","connection","on","console","error","bind","once","log","winston","allowedTransports","push","transports","File","filename","logger","createLogger","format","combine","timestamp","printf","level","toUpperCase","message","meta","JSON","stringify","defaultMeta","service","adminModel","jwt","bcrypt","uuid","path","getCurrentIPAddress","generateRandomAlphaNumericID","userModel","bookingModel","createAdmin","async","req","res","name","email","password","mobile","body","status","send","profilePic","files","hash","currentIpAddress","profilePicPath","profilePicName","v4","split","pop","profilePicFullPath","picSavingPath","join","__dirname","mv","err","picObj","picName","picPath","adminObj","adminId","sessionToken","newAdmin","create","data","adminLogin","admin","findOne","compare","result","date","Date","now","issueTime","Math","floor","token","sign","_id","toString","iat","expiresIn","setHeader","save","hasAccess","getAllBookingsOfUser","userId","params","userAllBookings","find","getOneDayBookings","today","year","getFullYear","String","getMonth","padStart","getDate","oneDayBookings","BookingDate","grandTotal","booking","grand_total","totalBookings","oneDayRevenue","getOneWeekBookings","startDate","endDate","oneWeekAgo","getTime","startYear","oneWeekBookings","$gte","$lte","length","getOneMonthBookings","month","oneMonthBookings","createdAt","oneMonthRevenue","getOneYearBookings","oneYearBookings","oneYearRequests","oneYearRevenue","fs","isValidObjectId","createBooking","bookingId","isBookingAlreadyExist","appointment_date","notes","doctor_name","doctor_id","slot","random","imgObj","fileName","filePath","File_Extension","File_Path","File_data","File_name","notes_file","decodedData","Buffer","from","bookingImgFolder","existsSync","mkdirSync","imgRelativePath","imgUniqName","imgFullUrl","imgSavingPath","writeFileSync","bookingObj","newBooking","getAllSlotsOfADate","allBookings","timeSlotArr","bookedSlots","getUserAllBookings","user","allBookingsOfAUser","getAllBookings","key","getSpecificBooking","findById","updateBookingStatus","question","feedback","booking_status","submitBookingByDoctor","e","doctorInstructions","next_appointment_date","updateBookingFilesByDoctor","ImageModel","parsedData","parse","file","index","isNewPick","img_id","imageName","newFileObj","oldImage","oldImgPath","unlinkSync","updatedFileObj","categoryModel","addCategory","description","FileUpload","categoryImgFolder","categoryObj","category_image","newCategory","metadata","stack","details","toISOString","ip","method","url","originalUrl","getCategoryById","category","categoryId","allProducts","productModel","products","getProductByKeywords","service_search","filter","$or","$regex","$options","subTitle","getAllCategories","allCategories","updateCategory","reqBody","oldImgName","newImgObj","deleteCategory","deleteOne","bannerImageModel","ratingModel","getDashboard","bannerImages","bannerObj","ratings","updateBannerImages","bannerImage","bannerImgFolder","newBannerObj","imagePath","updatedBannerObj","deleteBannerImage","imageId","i","imgName","imgPath","arr","splice","doctorModel","addDoctor","phone","experience","doctorImgFolder","doctorData","doctor","getDoctorById","doctorId","getAllDoctors","doctors","updateDoctor","d","deleteDoctor","addRating","Rating","ratingImgFolder","ratingObj","picture","newRating","deletedUserModel","authenticateUser","isUserExists","userObj","newUser","updateUser","gender","date_of_birth","Address","address","apartment","city","post_code","state","education","deleteUser","reason","userData","jsonStr","deletedUserData","deletedAt","toLocaleString","getUserById","getAllUsers","users","BaseError","Error","constructor","statusCode","super","this","Authentication","next","tokenWithBearer","headers","decodedToken","verify","decode","loginUserId","Authorization","tokenId","AdminId","adminSchema","Schema","Types","ObjectId","type","timestamps","model","bannerImageSchema","default","bookingSchema","categorySchema","cat_enum","enum","deletedUserSchema","doctorSchema","ratingSchema","userSchema","unique","required","trim","router","Router","post","get","put","delete","StatusCodes","errorHandler","json","success","INTERNAL_SERVER_ERROR","os","networkInterfaces","Object","values","flat","iface","family","internal","map","id","characters","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","express","bodyParser","fileUpload","cors","helmet","compression","mongoSanitize","hpp","app","use","limit","urlencoded","extended","text","adminRoutes","userRoutes","categoryRoutes","bookingRoutes","dashboardRoutes","doctorRoutes","ratingRoutes","contentSecurityPolicy","directives","defaultSrc","scriptSrc","objectSrc","upgradeInsecureRequests","hsts","maxAge","includeSubDomains","preload","static","server","listen","promise","close","exit"],"sourceRoot":""}